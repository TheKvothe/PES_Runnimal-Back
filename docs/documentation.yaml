openapi: 3.0.0
info:
  title: Runnimal
  description: 'Runnimal, tu app de fitness animal'
  contact: {}
  version: '1.0'
servers:
- url: http://nidorana.fib.upc.edu/api
  variables: {}
- url: http://nidoqueen.fib.upc.edu/api
  variables: {}
- url: http://localhost:3000/api
  variables: {}
paths:
  /users:
    get:
      tags:
      - Users
      summary: GET Users
      description: 'Devuelve una lista de todos los usuarios'
      operationId: GetUsers
      responses:
        200:
          description: 'Te devuelve la lista de usuarios'
          headers: {}
    post:
      tags:
      - Users
      summary: POST User
      description: ''
      operationId: PostUser
      parameters:
      - in: header
        name: alias
        description: 'Alias del usuario'
        required: true
        schema:
          type: string
          example: Brock
      - in: header
        name: email
        description: 'Email del usuario'
        required: true
        schema:
          type: string
          example: brock@pokemon.com
      - in: header
        name: password
        description: 'Password del usuario'
        required: true
        schema:
          type: string
          example: onix
      requestBody:
        description: ''
        content:
          application/json:
            example: '{"alias":"Misty","email":"misty@pokemon.com","password":"psyduck"}'
        required: true
      responses:
        200:
          description: 'Se ha ejecutado correctamente'
          headers: {}
        400:
          description: 'Error en la creacion.'
          headers: {}
  /users/{email}:
    get:
      tags:
      - Users
      summary: GET user
      description: 'Consulta el usuario'
      operationId: GetUser
      parameters:
      - in: path
        name: email
        description: 'Email del usuario'
        required: true
        schema:
          type: string
          example: misty@pokemon.com
      responses:
        200:
          description: 'Te devuelve el objeto'
          headers: {}
      deprecated: false
    put:
      tags:
      - Users
      summary: EDIT user
      description: 'Edita el usuario'
      operationId: EditUser
      parameters:
      - in: path
        name: email
        description: 'Email del usuario'
        required: true
      
        schema:
          type: string
          example: misty@pokemon.com
      responses:
        200:
          description: 'Te devuelve el objeto editado'
          headers: {}
      deprecated: false
      
      requestBody: 
       content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                newname:
                  type: string
              example:   # Sample object
                newname: Ash
    delete:
      tags:
      - Users
      summary: DELETE users
      description: 'Elimina el usuario'
      operationId: DeleteUsers
      parameters:
      - in: path
        name: email
        description: 'email del usuario'
        required: true
        schema:
          type: string
          example: misty@pokemon.com
      responses:
        200:
          description: 'El usuario se ha eliminado'
          headers: {}
  /photo/users/{email}:
    post:
      tags:
      - Photos
      summary: POST user photos
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: El email del usuario.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                photo:
                  type: object
      responses:
        200:
          description: 'La foto se ha subido bien'
          headers: {}
    get:
      tags:
      - Photos
      summary: GET user photos
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: El email del usuario.
      responses:
        200:
          description: 'Devuelve la foto del usuario'
          headers: {}
  /photo/pets/{owner}/{name}:
    post:
      tags:
      - Photos
      summary: POST pet photos
      parameters:
        - in: path
          name: owner
          schema:
            type: string
          required: true
          description: El email del due単o de la mascota.
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: El nombre de la mascota.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                photo:
                  type: object
      responses:
        200:
          description: 'La foto se ha subido bien'
          headers: {}
    get:
      tags:
      - Photos
      summary: GET pet photos
      parameters:
        - in: path
          name: owner
          schema:
            type: string
          required: true
          description: El email del due単o de la mascota.
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: El nombre de la mascota.
      responses:
        200:
          description: 'Devuelve la foto del usuario'
          headers: {}
  /photo/trainnings/{id}:
    post:
      tags:
      - Photos
      summary: POST trainning photos
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: El id del entrenamiento.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                photo:
                  type: object
      responses:
        200:
          description: 'La foto se ha subido bien'
          headers: {}
    get:
      tags:
      - Photos
      summary: GET trainning photos
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: El id del entrenamiento.
      responses:
        200:
          description: 'Devuelve la foto del usuario'
          headers: {}
  /pet/{owner}/{name}:
    delete:
      tags:
      - Pets
      summary: DELETE pet
      description: ''
      operationId: DeletePet
      parameters:
        - in: path
          name: owner
          schema:
            type: string
          required: true
          description: El email del due単o del perro.
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: El nombre de la mascota.
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    get:
      tags:
      - Pets
      summary: GET pet
      description: ''
      operationId: GetPet
      parameters:
        - in: path
          name: owner
          schema:
            type: string
          required: true
          description: El email del due単o del perro.
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: El nombre de la mascota.
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /pets:
    get:
      tags:
      - Pets
      summary: GET Pets
      description: ''
      operationId: GetPets
      parameters:
      - name: Content-Type
        in: header
        description: ''
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: application/json
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    
    put:
      tags:
      - Pets
      summary: EDIT pet
      description: 'Edita la mascota'
      operationId: EditPet
      parameters:
      - in: path
        name: owner
        description: 'Email del usuario'
        required: true
        schema:
          type: string
          example: misty@pokemon.com
      - in : path 
        name: name
        description: 'Nombre de la mascota'
        required: true 
        schema:
          type: string
          example: Totodile
      responses:
        200:
          description: 'Te devuelve el objeto editado'
          headers: {}
      deprecated: false
      
      requestBody: 
       content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                weight:
                  type: number
                description:
                  type: string
                size:
                  type: string
                  enum: [small, medium, big]
                race:
                  type: string
                birth:
                  type: number
                  
                
              example:   # Sample object
                newname: Pikachu
                weight: 8 
                description: 'Buena gente'
                size: 'small'
                race: 'fuego'
                birth: 08042019
    
    post:
      tags:
      - Pets
      summary: POST Pet
      description: ''
      operationId: PostPet
      parameters:
      - name: Content-Type
        in: header
        description: ''
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: application/json
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            example: '{"name":"Pikachu","weight":3,"race":"Electrico","birth":1996,"description":"No le gusta la pokeball","size":5,"owner":"ash@pokemon.com"}'
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /points: 
    get: 
      tags: 
      - Points
      summary: List of all points
      responses: 
        200: 
          description: ''
          headers: {}
      deprecated: false 
    post: 
      tags: 
      - Points
      summary: Create a new point
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            example: '{"title": "Prueba1",
          "description": "Es un sitio de prueba",
          "type": "othder",
          "photo_url": "www.photo.com",
          "coord" : [39.8, 75.3]}'
        required: true

      responses: 
        200: 
          description: 'Se ha a単adido correctamente'
        400: 
          description: 'No se ha podido a単adir'
  
  /point/{id}:
      delete: 
        tags:
        - Points
        summary: Delete point by id
        parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: El email del due単o del perro.
        responses: 
          200: 
            description: 'Se ha eliminado correctemente'
          400: 
            description: 'El punto no existe'

      

components:
  schemas:
    User:
      title: POSTUserRequest
      required:
      - alias
      - email
      - password
      type: object
      properties:
        alias:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        alias: Misty
        email: misty@pokemon.com
        password: psyduck
    Pet:
      title: POSTPetRequest
      required:
      - name
      - weight
      - race
      - birth
      - description
      - size
      - owner
      type: object
      properties:
        name:
          type: string
        weight:
          type: integer
          format: int32
        race:
          type: string
        birth:
          type: integer
          format: int32
        description:
          type: string
        size:
          type: integer
          format: int32
        owner:
          type: string
      example:
        name: Pikachu
        weight: 3
        race: Electrico
        birth: 1996
        description: No le gusta la pokeball
        size: Small
        owner: ash@pokemon.com
tags:
- name: Users
  description: ''
- name: Pets
  description: ''
